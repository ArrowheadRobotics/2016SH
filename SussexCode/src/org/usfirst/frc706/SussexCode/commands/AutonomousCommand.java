// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc706.SussexCode.commands;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc706.SussexCode.Robot;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class AutonomousCommand extends Command {
	
	private boolean[] jumpers = new boolean[6];
	private int defense; 
	private int defensePosition;
	private int robotPosition;
	private int step;
	private boolean done = false;
	private double currentAccelX;
	private double currentAccelZ;
	private double jerkX;
	private double jerkZ;
	private double lastAccelX;
	private double lastAccelZ;
	private double accelThreshold = 0.01;
	private long startTime;


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutonomousCommand() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	defense = (int) Robot.def.getSelected();
    	defensePosition = (int) Robot.dpos.getSelected();
    	robotPosition = (int) Robot.rpos.getSelected();
    	
    	new ZeroIntake();
    	new ZeroShooter();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if(robotPosition == defensePosition){
	    	crossDefense();
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return done;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
    
    protected void crossDefense(){
    	switch(defense){
		case 0:
			//lower intake
			new GearLow();
			Robot.chassis.move(0.6, 0.6);
			Timer.delay(2);
			startTime = System.currentTimeMillis();
			while(detectCollision()==false || System.currentTimeMillis()<startTime+5000){
				Robot.chassis.move(0.6, 0.6);
			}
			Robot.chassis.move(0, 0);
			//raise intake
			Robot.chassis.move(0.6, 0.6);
			Timer.delay(4);
			Robot.chassis.move(0, 0);
			new GearHigh();
			done = true;
			break;
		case 1:
			new GearLow();
			Robot.chassis.move(0.6, 0.6);
			Timer.delay(2);
			while(detectCollision()==false || System.currentTimeMillis()<startTime+5000){
				Robot.chassis.move(0.6, 0.6);
			}
			Robot.chassis.move(0, 0);
			//lower intake
			Robot.chassis.move(0.6, 0.6);
			Timer.delay(3.0);
			//raise intake
			Robot.chassis.move(0, 0);
			new GearHigh();
			done = true;
			break;
		case 4:
			Robot.chassis.move(0, 0);
			done = true;
			break;
		case 5:
			Robot.chassis.move(0, 0);
			done = true;
			break;
    	default:
    		Robot.chassis.move(0.6, 0.6);
    		Timer.delay(7.0);
    		Robot.chassis.move(0, 0);
    		done = true;
    		break;
    	}
    }
    
    protected boolean detectCollision() {
    	currentAccelX = Robot.nav.getWorldLinearAccelX();
    	jerkX = currentAccelX-lastAccelX;
    	lastAccelX = currentAccelX;
    	currentAccelZ = Robot.nav.getWorldLinearAccelZ();
    	jerkZ = currentAccelZ - lastAccelZ;
    	lastAccelZ = currentAccelZ;
    	
    	if(Math.abs(jerkX)>accelThreshold||Math.abs(jerkZ)>accelThreshold) {
    		return true;
    	} else {
    		return false;
    	}
    	
    	
    }
}
