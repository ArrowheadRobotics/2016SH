// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc706.SussexCode.commands;

import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.CommandGroup;

import org.usfirst.frc706.SussexCode.Constants;
import org.usfirst.frc706.SussexCode.Robot;
import org.usfirst.frc706.SussexCode.RobotMap;

import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class AutonomousCommand extends CommandGroup {
	
	private int defense; 
	private int defensePosition;
	private int robotPosition;
	private int step;
	private boolean done = false;
	private double currentAccelX;
	private double currentAccelZ;
	private double jerkX;
	private double jerkZ;
	private double lastAccelX;
	private double lastAccelZ;
	private double accelThreshold = 2;
	private long startTime;
	private double defaultSpeed = -0.6;
	private double encStartPos = RobotMap.rightDriveEnc.getValue();
	private double encCurrentPos;
	private double encLastPos;
	private double distance = 900;
	private double trueCount = 0;
	private long zeroShooterStartTime;
	private long zeroIntakeStartTime;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutonomousCommand() {
    	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	defense = (int) Robot.def.getSelected();
    	defensePosition = (int) Robot.dpos.getSelected();
    	robotPosition = (int) Robot.rpos.getSelected();
    	RobotMap.shootershooterAngleDrive.enableBrakeMode(true);
    	zeroBoth();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if(robotPosition == defensePosition){
	    	crossDefense();
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return done;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
    
    protected void crossDefense(){
    	RobotMap.intakeintakeAngleDrive.changeControlMode(TalonControlMode.Position);
		RobotMap.shootershooterAngleDrive.changeControlMode(TalonControlMode.Position);
    	switch(defense){
		case 0:
			RobotMap.intakeintakeAngleDrive.set(Constants.Setpoints.INTAKE_VERTICAL);
    		RobotMap.shootershooterAngleDrive.set(Constants.Setpoints.SHOOTER_HOLD);
    		RobotMap.chassisGearSol.set(Value.kReverse);
			startTime = System.currentTimeMillis();
			while(RobotMap.chassisleftDriveOne.getEncPosition()<encStartPos+distance && System.currentTimeMillis()<startTime+5000){
				Robot.chassis.move(-0.4, -0.4);
			}
			//Robot.intake.position = Constants.Setpoints.INTAKE_LOWER;
			Robot.chassis.move(0, 0);
			//raise intake
			Robot.chassis.move(defaultSpeed, defaultSpeed);
			Timer.delay(4);
			Robot.chassis.move(0, 0);
			RobotMap.chassisGearSol.set(Value.kForward);
			done = true;
			break;
		case 1:
			RobotMap.intakeintakeAngleDrive.set(Constants.Setpoints.INTAKE_VERTICAL);
    		RobotMap.shootershooterAngleDrive.set(Constants.Setpoints.SHOOTER_HOLD);
    		RobotMap.chassisGearSol.set(Value.kReverse);
    		startTime = System.currentTimeMillis();
			while(trueCount<distance && System.currentTimeMillis()<startTime+5000){
				Robot.chassis.move(-0.4, -0.4);
				detectDistanceTravelled();
			}
			System.out.println("done whileing");
			Robot.chassis.move(0, 0);
			Robot.intake.position = Constants.Setpoints.INTAKE_LOWER;
			//Timer.delay(.5);
			//Robot.chassis.move(0.4, 0.4);
			//Timer.delay(.5);
			//RobotMap.intakeintakeAngleDrive.set(Constants.Setpoints.INTAKE_VERTICAL);
    		//RobotMap.shootershooterAngleDrive.set(Constants.Setpoints.SHOOTER_HOLD);
			//Timer.delay(3.0);
			//Robot.chassis.move(0, 0);
			RobotMap.chassisGearSol.set(Value.kForward);
			done = true;
			break;
		case 2:
			System.out.println("moat");
    		RobotMap.intakeintakeAngleDrive.set(Constants.Setpoints.INTAKE_VERTICAL);
    		RobotMap.shootershooterAngleDrive.set(Constants.Setpoints.SHOOTER_HOLD);
    		Robot.chassis.move(defaultSpeed, defaultSpeed);
    		Timer.delay(4.0);
    		Robot.chassis.move(0, 0);
    		done = true;
    		break;
		case 3:
			System.out.println("ramparts");
			RobotMap.intakeintakeAngleDrive.set(Constants.Setpoints.INTAKE_VERTICAL);
    		RobotMap.shootershooterAngleDrive.set(Constants.Setpoints.SHOOTER_HOLD);
    		Robot.chassis.move(defaultSpeed, defaultSpeed);
    		Timer.delay(2.0);
    		Robot.chassis.move(0, 0);
    		done = true;
    		break;
		case 4:
			Robot.chassis.move(0, 0);
			done = true;
			break;
		case 5:
			Robot.chassis.move(0, 0);
			done = true;
			break;
		case 6:
			System.out.println("rockwall");
    		RobotMap.intakeintakeAngleDrive.set(Constants.Setpoints.INTAKE_VERTICAL);
    		RobotMap.shootershooterAngleDrive.set(Constants.Setpoints.SHOOTER_HOLD);
    		Robot.chassis.move(defaultSpeed, defaultSpeed);
    		Timer.delay(2.5);
    		Robot.chassis.move(0, 0);
    		done = true;
    		break;
		case 7:
			System.out.println("rough terrain");
    		RobotMap.intakeintakeAngleDrive.set(Constants.Setpoints.INTAKE_VERTICAL);
    		RobotMap.shootershooterAngleDrive.set(Constants.Setpoints.SHOOTER_HOLD);
    		Robot.chassis.move(defaultSpeed, defaultSpeed);
    		Timer.delay(2.0);
    		Robot.chassis.move(0, 0);
    		done = true;
    		break;
		case 8:
			System.out.println("lowbar");
    		RobotMap.intakeintakeAngleDrive.set(Constants.Setpoints.INTAKE_HORIZONTAL);
    		RobotMap.shootershooterAngleDrive.set(Constants.Setpoints.SHOOTER_DOWN);
    		Robot.chassis.move(defaultSpeed,defaultSpeed);
    		Timer.delay(2.0);
    		Robot.chassis.move(0, 0);
    		done = true;
    		break;
    	default:
    		break;
    	}
    }
    
    
    protected boolean detectCollision() {
    	currentAccelX = Robot.nav.getWorldLinearAccelX();
    	jerkX = currentAccelX-lastAccelX;
    	lastAccelX = currentAccelX;
    	currentAccelZ = Robot.nav.getWorldLinearAccelZ();
    	jerkZ = currentAccelZ - lastAccelZ;
    	lastAccelZ = currentAccelZ;
    	System.out.println("JerkX: " + jerkX + " Jerk Z: " + jerkZ);
    	if(Math.abs(jerkX)>accelThreshold||Math.abs(jerkZ)>accelThreshold) {
    		return true;
    	} else {
    		return false;
    	}
    	
    	
    }
    
    protected void detectDistanceTravelled() {
    	encCurrentPos=RobotMap.rightDriveEnc.getValue();
    	if(encCurrentPos<encLastPos) {
    		trueCount+=(encLastPos-encCurrentPos);
    	}
    	if(encCurrentPos>encLastPos+3500) {
    		trueCount+=4096-encCurrentPos;
    	} 	
    	encLastPos=encCurrentPos;
    }
    
    protected void zeroShooter() {
    	zeroShooterInit();
    	zeroShooterStartTime=System.currentTimeMillis();
    	while(zeroShooterIsFin()==false&&System.currentTimeMillis()<zeroShooterStartTime+10000) {
    		zeroShooterEx();
    	}
    	zeroShooterEnd();
    }
    
    protected void zeroIntake() {
    	zeroIntakeInit();
    	zeroIntakeStartTime=System.currentTimeMillis();
    	while(zeroIntakeIsFin()==false&&System.currentTimeMillis()<zeroIntakeStartTime+10000) {
    		zeroIntakeEx();
    	}
    	zeroIntakeEnd();
    }
    
    protected void zeroBoth() {
    	zeroIntakeInit();
    	zeroShooterInit();
    	zeroIntakeStartTime=System.currentTimeMillis();
    	zeroShooterStartTime=System.currentTimeMillis();
    	while((zeroShooterIsFin()||zeroIntakeIsFin())==false&&System.currentTimeMillis()<zeroIntakeStartTime+10000) {
    		zeroIntakeEx();
    		zeroShooterEx();
    	}
    }
    
    
    protected void zeroShooterInit() {
    	Robot.shooter.hasZeroed = false;
    	RobotMap.shootershooterAngleDrive.enableControl();
    	RobotMap.shootershooterAngleDrive.changeControlMode(TalonControlMode.PercentVbus);
    	RobotMap.shootershooterAngleDrive.set(-.4);
    }
    
    protected void zeroShooterEx() {
    	RobotMap.shootershooterAngleDrive.set(-.4);
    	System.out.println("Down");
    }
    
    protected boolean zeroShooterIsFin() {
        return RobotMap.shootershooterAngleDrive.isRevLimitSwitchClosed();
    }
    
    protected void zeroShooterEnd() {
    	System.out.println("end");
    	RobotMap.shootershooterAngleDrive.set(0);
    	System.out.println("set");
    	RobotMap.shootershooterAngleDrive.setPosition(0);
    	System.out.println("setEnc");
    	//RobotMap.shootershooterAngleDrive.changeControlMode(TalonControlMode.Position);
    	//RobotMap.shootershooterAngleDrive.set(0);
    	System.out.println("done");
    	Robot.shooter.hasZeroed = true;
    	//new Setpoints("shoot");
    }
    
    protected void zeroIntakeInit() {
    	Robot.intake.hasZeroed = false;
    	RobotMap.intakeintakeAngleDrive.enableControl();
    	RobotMap.intakeintakeAngleDrive.changeControlMode(TalonControlMode.PercentVbus);
    	RobotMap.intakeintakeAngleDrive.set(.4);
    }
    
    protected void zeroIntakeEx() {
    	RobotMap.intakeintakeAngleDrive.set(.4);
    	System.out.println("Down");    	
    }
    
    protected boolean zeroIntakeIsFin() {
        return RobotMap.intakeintakeAngleDrive.isFwdLimitSwitchClosed();    	
    }
    
    protected void zeroIntakeEnd() {
    	System.out.println("end");
    	RobotMap.intakeintakeAngleDrive.set(0);
    	System.out.println("set");
    	RobotMap.intakeintakeAngleDrive.setPosition(0);
    	System.out.println("setEnc" + RobotMap.intakeintakeAngleDrive.getEncPosition());
    	
    	System.out.println("done");
    	//new Setpoints("shoot");
    	Robot.intake.hasZeroed = true;    	
    }    
}
